name: contracts-release

# on:
#   workflow_dispatch:
#     inputs:
#       release_version:
#         description: 'Version number of the release to be deployed'
#         required: true
#       network:
#         description: 'Network to deploy core contracts release on'
#         required: true

on: push
env:
  NETWORK: alfajores
  VERSION: 5
# env:
#   NETWORK: ${{ github.event.inputs.network }}
#   VERSION: ${{ github.event.inputs.release_version }}


jobs:
  core_contracts_release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # all history

      - uses: actions/setup-node@v2
        with:
          node-version: '12'
      - uses: runs deploy script
        run: |
          ./scripts/bash/deploy.sh
          cd packages/protocol && yarn run deploy -b a -n alfajores -v 5 -k a -p Trevor
        

      # - name: yarn
      #   run: |
      #     npm install --global yarn
      #     yarn
      #     yarn lerna bootstrap

      # - name: Build packages
      #   run: yarn lerna run build --ignore docs

      # - name: Install geth
      #   run: |
      #     sudo add-apt-repository -y ppa:ethereum/ethereum
      #     sudo apt-get update
      #     sudo apt-get install ethereum

      # - name: Setup lightest node
      #   if: ${{ env.NETWORK != 'staging' }}
      #   run: |
      #     export CELO_IMAGE=us.gcr.io/celo-org/geth:${{ env.NETWORK }}
      #     docker pull $CELO_IMAGE
      #     mkdir celo-data-dir
      #     mv UTC--2021-08-04T04-11-41.231375000Z--7c3ed16519eeceb354ac2d88a6a6722a3a9eb886 celo-data-dir/root/.celo/keystore
      #     cd celo-data-dir
      #     export NETWORK_OPTION="--${{ env.NETWORK }}"
      #     cd account/accountSecret
      #     echo '${{ secrets.PW }} ' > password.txt
      #     cd ../..
      #     docker run --rm --net=host -v $PWD:$PWD --entrypoint /bin/sh -c "geth account import --password $PWD:/root/.celo/account/accountSecret --"
      #     docker run --name celo-lightestnode -d --restart unless-stopped --stop-timeout 300 -p 127.0.0.1:8545:8545 -p 127.0.0.1:8546:8546 -p 30303:30303 -p 30303:30303/udp -v $PWD:/root/.celo $CELO_IMAGE --verbosity 3 --syncmode lightest --rpc --rpcaddr 0.0.0.0 --rpcapi eth,net,web3,debug,admin,personal --light.serve 90 --light.maxpeers 1000 --maxpeers 1100 --nousb $NETWORK_OPTION --datadir /root/.celo
      #     cd ..

      # - name: Checking if node is synced
      #   if: ${{ env.NETWORK != 'staging' }}
      #   run: |
      #     while true; do output=$(docker exec -i celo-lightestnode geth attach --exec "eth.syncing" | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g"); echo $output; sleep 1; if [ $output == 'false' ]; then break; fi; done

      # - name: Add private key to node
      #   run: |
      #     echo '${{ secrets.ALFAJORES_PRIVKEY }}' > privkey.txt
      #     echo '${{ secrets.PW }}' > password.txt
      #     geth account import --password password.txt privkey.txt
      #     rm privkey.txt
      #     geth account unlock 
      
      # - name: Get branch name
      #   shell: bash
      #   run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      #   id: get_branch

      # - name: Verify previous release
      #   run: |
      #     export OLD_BRANCH=core-contracts.v$((${{ env.VERSION }}-1))
      #     cd packages/protocol && yarn run verify-deployed -b $OLD_BRANCH -n ${{ env.NETWORK }} -f;

      # - name: Verify version compatibility
      #   run: |
      #     OLD_BRANCH=core-contracts.v$((${{ env.VERSION }}-1))
      #     NEW_BRANCH=${{ steps.get_branch.outputs.branch }}
      #     cd packages/protocol && yarn run check-versions -a $OLD_BRANCH -b $NEW_BRANCH -r report.json;

      # - name: Make release
      #   run: |
      #     NEW_BRANCH=${{ steps.get_branch.outputs.branch }}
      #     cd packages/protocol && yarn run make-release -b $NEW_BRANCH -f 0x7F871c887e6a430D3c1F434737F568B07559F9E7 -n ${{ env.NETWORK }} -p proposal.json -r report.json -i ./releaseData/initializationData/release${{ env.VERSION }}.json -l libraries.json;
