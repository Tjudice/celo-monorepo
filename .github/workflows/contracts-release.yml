name: contracts-release

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Git reference where contracts to be deployed are defined'
        required: true
      network:
        description: 'Network to deploy core contracts release on'
        required: true
      verify_tag:
        description: 'Git reference where contracts currently registered on network are defined'
        required: true
env:
  NETWORK: ${{ github.event.inputs.network }}
  RELEASE_TAG: ${{ github.event.inputs.release_tag }}
  VERIFY_TAG: ${{ github.event.inputs.verify_tag }}
  
jobs:
  core_contracts_release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # all history

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      - name: yarn
        run: |
          npm install --global yarn
          yarn
          yarn lerna bootstrap

      - name: Build packages
        run: yarn lerna run build --scope=@celo/protocol --include-filtered-dependencies

      - name: Setup lightest node    
        if: ${{ env.NETWORK != 'staging' }}
        run: |
          export CELO_IMAGE=us.gcr.io/celo-org/geth:${{ env.NETWORK }}
          docker pull $CELO_IMAGE
          mkdir celo-data-dir
          cd celo-data-dir
          export NETWORK_OPTION="--${{ env.NETWORK }}"
          docker run --name celo-lightestnode -d --restart unless-stopped --stop-timeout 300 -p 127.0.0.1:8545:8545 -p 127.0.0.1:8546:8546 -p 30303:30303 -p 30303:30303/udp -v $PWD:/root/.celo $CELO_IMAGE --verbosity 3 --syncmode lightest --rpc --rpcaddr 0.0.0.0 --rpcapi eth,net,web3,debug,admin,personal --light.serve 90 --light.maxpeers 1000 --maxpeers 1100 --nousb $NETWORK_OPTION --datadir /root/.celo
          CONT_ID=$(docker inspect --format="{{.Id}}" celo-lightestnode)
          echo -n 'A' > secret.txt
          docker cp secret.txt $CONT_ID:/root/.celo
          docker exec -w /root/.celo celo-lightestnode geth account new --password secret.txt
          cd ..
      
      - name: Checking if node is synced
        if: ${{ env.NETWORK != 'staging' }}
        run: |
          while true; do output=$(docker exec -i celo-lightestnode geth attach --exec "eth.syncing" | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g"); echo $output; sleep 1; if [ $output == 'false' ]; then break; fi; done

      # - name: Add private key to node
      #   run: |
      #     echo '${{ secrets.ALFAJORES_PRIVKEY }}' > privkey.txt
      #     echo '${{ secrets.PW }}' > password.txt
      #     geth account import --password password.txt privkey.txt
      #     rm privkey.txt
      #     geth account unlock 
      # -f 0x7F871c887e6a430D3c1F434737F568B07559F9E7
      
      - name: Verify previous release
        run: |
          yarn run --cwd packages/protocol verify-deployed -b ${{ env.VERIFY_TAG }} -n ${{ env.NETWORK }} -f;

      - name: Verify version compatibility
        run: |
          yarn run --cwd packages/protocol check-versions -a ${{ env.VERIFY_TAG }} -b ${{ env.RELEASE_TAG }} -r report.json;

      - name: Make release
        run: |
          yarn run --cwd packages/protocol make-release -b ${{ env.RELEASE_TAG }} -n ${{ env.NETWORK }} -i ${{ env.INITIALIZATION_DATA }} -p proposal.json -r report.json -l libraries.json;
