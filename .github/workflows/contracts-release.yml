name: contracts-release

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Version number of the release to be deployed'
        required: true
      network:
        description: 'Network to deploy core contracts release on'
        required: true

# on: push
# env:
#   NETWORK: alfajores
#   VERSION: 5
env:
  NETWORK: ${{ github.event.inputs.network }}
  VERSION: ${{ github.event.inputs.release_version }}


jobs:
  core_contracts_release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      - name: yarn
        run: |
          npm install --global yarn
          yarn
          yarn lerna bootstrap

      - name: Build packages
        run: yarn lerna run build --ignore docs
      
      - name: Setup celotool
        run: |
          alias  celotooljs=/home/runner/work/celo-monorepo/celo-monorepo/packages/celotool/bin/celotooljs.sh


      - name: Setup Cloud SDK
        if: ${{ env.NETWORK == 'staging' }}
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: 'celo-testnet'
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Setup port-forward
        if: ${{ env.NETWORK == 'staging' }}
        run: |
          gcloud container clusters get-credentials celo-networks-dev --project celo-testnet --zone us-west1-a
          kubectl config set-context --current --namespace default
          kubectl port-forward --namespace=staging staging-validators-0 8545:8545 &
          sleep 10

      - name: Setup lightest node    
        if: ${{ env.NETWORK != 'staging' }}
        run: |
          export CELO_IMAGE=us.gcr.io/celo-org/geth:${{ env.NETWORK }}
          docker pull $CELO_IMAGE
          mkdir celo-data-dir
          cd celo-data-dir
          export NETWORK_OPTION="--${{ env.NETWORK }}"
          Create account on docker, setup full node
          docker run --name celo-lightestnode -d --restart unless-stopped --stop-timeout 300 -p 127.0.0.1:8545:8545 -p 127.0.0.1:8546:8546 -p 30303:30303 -p 30303:30303/udp -v $PWD:/root/.celo $CELO_IMAGE --verbosity 3 --syncmode lightest --rpc --allow-insecure-unlock --rpcaddr 0.0.0.0 --rpcapi eth,net,web3,debug,admin,personal --light.serve 90 --light.maxpeers 1000 --maxpeers 1100 --nousb $NETWORK_OPTION --datadir /root/.celo
          CONT_ID=$(docker inspect --format="{{.Id}}" celo-lightestnode)
          echo -n 'A' > secret.txt
          docker cp secret.txt $CONT_ID:/root/.celo
          docker exec -w /root/.celo celo-lightestnode geth account new --password secret.txt
          cd ..
      
      - name: Checking if node is synced
        if: ${{ env.NETWORK != 'staging' }}
        run: |
          while true; do output=$(docker exec -i celo-lightestnode geth attach --exec "eth.syncing" | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g"); echo $output; sleep 1; if [ $output == 'false' ]; then break; fi; done
      
      - name: Create staging account
        if: ${{ env.NETWORK == 'staging' }}
        run: |
          echo -n 'A' > secret.txt
          ./packages/celotool/bin/celotooljs.sh geth account new --password secret.txt
          cd packages/protocol && DEBUG=* yarn run fund-burner -n ${{ env.NETWORK }}
     
      - name: Fund burner account
        run: |
          cd packages/protocol && DEBUG=* yarn run fund-burner -n ${{ env.NETWORK}} -k ${{ secrets.ALFAJORES_PRIVKEY }}
      
      - name: Get branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: get_branch

      - name: Verify previous release
        run: |
          export OLD_BRANCH=core-contracts.v$((${{ env.VERSION }}-1))
          cd packages/protocol && yarn run verify-deployed -b $OLD_BRANCH -n ${{ env.NETWORK }} -f;

      - name: Verify version compatibility
        run: |
          OLD_BRANCH=core-contracts.v$((${{ env.VERSION }}-1))
          NEW_BRANCH=${{ steps.get_branch.outputs.branch }}
          cd packages/protocol && yarn run check-versions -a $OLD_BRANCH -b $NEW_BRANCH -r report.json;

      - name: Make release
        run: |
          FROM=$(cat burner.txt)
          NEW_BRANCH=${{ steps.get_branch.outputs.branch }}
          cd packages/protocol && DEBUG=* yarn run make-release -b $NEW_BRANCH -n ${{ env.NETWORK }} -f $FROM -p proposal.json -r report.json -i ./releaseData/initializationData/release${{ env.VERSION }}.json -l libraries.json;